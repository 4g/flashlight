{
  "py_trace": [
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: trace",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 247     if kwargs is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 248         kwargs = {}\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 249     if not isinstance(args, tuple):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 250         args = (args,)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 251     return TracedModule(f, nderivs=nderivs)(*args, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: __init__",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 256         super(TracedModule, self).__init__()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __init__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 51         self._backend = thnn_backend\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 52         self._parameters = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 53         self._buffers = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 54         self._backward_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 55         self._forward_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 56         self._forward_pre_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 57         self._modules = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 58         self.training = True\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 260         self.inner = inner\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 422                 if modules is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 425                 remove_from(self.__dict__, self._parameters, self._buffers)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: remove_from",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 402             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 403                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 402             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 403                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 402             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 403                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 402             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 426                 modules[name] = value\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 261         self.nderivs = nderivs\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 401         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 406         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 407         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 413         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 420             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 421             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 427             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 434                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 435                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 442                     object.__setattr__(self, name, value)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 357             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 265         in_vars = _flatten(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 268         module_state = list(self.state_dict(keep_vars=True).values())\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 481         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 482             destination = OrderedDict()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 486         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 490             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 491                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 481         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 486         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 490             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 491                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 481         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 484             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 485                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 486         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 492         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 490             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 491                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 481         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 484             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 485                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 486         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 492         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 490             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 491                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 481         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 484             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 485                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 486         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 492         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 490             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 491                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 481         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 486         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 492         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 490             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 491                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 481         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 484             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 485                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 484             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 485                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 486         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 492         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 490             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 491                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 481         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 484             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 485                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 484             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 485                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 483         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 486         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 492         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 492         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 489         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 492         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 269         trace = torch._C._tracer_enter(in_vars + module_state, self.nderivs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 270         _tracing = True\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 271         out = self.inner(*args)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 337             tracing_state._traced_module_stack = []\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 324             return None\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 342             tracing_state.push_scope(self.__class__.__name__)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: predictit.py -- function: forward",
    "File: predictit.py, class: CricketNet, Line: 79         team1 = self.team_embedder(batch[:, 0])\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 325         module = tracing_state._traced_module_stack[-1]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 600         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 328                 return name\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 340             tracing_state.push_scope('%s[%s]' % (self.__class__.__name__, name))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 97         padding_idx = self.padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 98         if padding_idx is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 99             padding_idx = -1\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 100         return self._backend.Embedding.apply(\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 8         fn = self.function_classes.get(name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 9         if fn is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 11         return fn\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 101             input, self.weight,\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 388                 return _parameters[name]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 102             padding_idx, self.max_norm, self.norm_type,\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 103             self.scale_grad_by_freq, self.sparse\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 34         ctx.padding_idx = padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 35         ctx.scale_grad_by_freq = scale_grad_by_freq\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 36         ctx._indices = None\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 37         ctx.sparse = sparse\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 39         assert indices.dim() <= 2\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 40         assert not ctx.needs_input_grad[0], \"Embedding doesn't \" \\\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 43         ctx._backend = type2backend[type(weight)]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: __getitem__",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backends, Line: 15         return self.backends[name].load()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: load",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 34         if self.backend is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 39         return self.backend\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 44         ctx._weight_size = weight.size()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 46         if not indices.is_contiguous():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 47             ctx._indices = indices.contiguous()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 48             indices = ctx._indices\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 52         output = weight.new()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/tensor.py -- function: new",
    "File: /home/hhsecond/mypro/pytorch/torch/tensor.py, class: FloatTensor, Line: 27         return self.__class__(*args, **kwargs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 53         if max_norm is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 56         if indices.dim() == 1:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 57             output = torch.index_select(weight, 0, indices)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 62         return output\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 377         return result\n",
    "File: predictit.py, class: CricketNet, Line: 80         team2 = self.team_embedder(batch[:, 1])\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 325         module = tracing_state._traced_module_stack[-1]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 600         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 328                 return name\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 340             tracing_state.push_scope('%s[%s]' % (self.__class__.__name__, name))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 97         padding_idx = self.padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 98         if padding_idx is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 99             padding_idx = -1\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 100         return self._backend.Embedding.apply(\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 8         fn = self.function_classes.get(name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 9         if fn is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 11         return fn\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 101             input, self.weight,\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 388                 return _parameters[name]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 102             padding_idx, self.max_norm, self.norm_type,\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 103             self.scale_grad_by_freq, self.sparse\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 34         ctx.padding_idx = padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 35         ctx.scale_grad_by_freq = scale_grad_by_freq\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 36         ctx._indices = None\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 37         ctx.sparse = sparse\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 39         assert indices.dim() <= 2\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 40         assert not ctx.needs_input_grad[0], \"Embedding doesn't \" \\\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 43         ctx._backend = type2backend[type(weight)]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: __getitem__",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backends, Line: 15         return self.backends[name].load()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: load",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 34         if self.backend is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 39         return self.backend\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 44         ctx._weight_size = weight.size()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 46         if not indices.is_contiguous():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 47             ctx._indices = indices.contiguous()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 48             indices = ctx._indices\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 52         output = weight.new()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/tensor.py -- function: new",
    "File: /home/hhsecond/mypro/pytorch/torch/tensor.py, class: FloatTensor, Line: 27         return self.__class__(*args, **kwargs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 53         if max_norm is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 56         if indices.dim() == 1:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 57             output = torch.index_select(weight, 0, indices)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 62         return output\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 377         return result\n",
    "File: predictit.py, class: CricketNet, Line: 81         toss_winner = self.team_embedder(batch[:, 2])\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 325         module = tracing_state._traced_module_stack[-1]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 600         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 328                 return name\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 340             tracing_state.push_scope('%s[%s]' % (self.__class__.__name__, name))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 97         padding_idx = self.padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 98         if padding_idx is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 99             padding_idx = -1\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 100         return self._backend.Embedding.apply(\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 8         fn = self.function_classes.get(name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 9         if fn is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 11         return fn\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 101             input, self.weight,\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 388                 return _parameters[name]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 102             padding_idx, self.max_norm, self.norm_type,\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 103             self.scale_grad_by_freq, self.sparse\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 34         ctx.padding_idx = padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 35         ctx.scale_grad_by_freq = scale_grad_by_freq\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 36         ctx._indices = None\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 37         ctx.sparse = sparse\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 39         assert indices.dim() <= 2\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 40         assert not ctx.needs_input_grad[0], \"Embedding doesn't \" \\\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 43         ctx._backend = type2backend[type(weight)]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: __getitem__",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backends, Line: 15         return self.backends[name].load()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: load",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 34         if self.backend is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 39         return self.backend\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 44         ctx._weight_size = weight.size()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 46         if not indices.is_contiguous():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 47             ctx._indices = indices.contiguous()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 48             indices = ctx._indices\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 52         output = weight.new()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/tensor.py -- function: new",
    "File: /home/hhsecond/mypro/pytorch/torch/tensor.py, class: FloatTensor, Line: 27         return self.__class__(*args, **kwargs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 53         if max_norm is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 56         if indices.dim() == 1:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 57             output = torch.index_select(weight, 0, indices)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 62         return output\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 377         return result\n",
    "File: predictit.py, class: CricketNet, Line: 82         host = self.ground_embedder(batch[:, 3])\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 325         module = tracing_state._traced_module_stack[-1]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 600         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 328                 return name\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 340             tracing_state.push_scope('%s[%s]' % (self.__class__.__name__, name))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 97         padding_idx = self.padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 98         if padding_idx is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 99             padding_idx = -1\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 100         return self._backend.Embedding.apply(\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 8         fn = self.function_classes.get(name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 9         if fn is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 11         return fn\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 101             input, self.weight,\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 388                 return _parameters[name]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 102             padding_idx, self.max_norm, self.norm_type,\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 103             self.scale_grad_by_freq, self.sparse\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 34         ctx.padding_idx = padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 35         ctx.scale_grad_by_freq = scale_grad_by_freq\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 36         ctx._indices = None\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 37         ctx.sparse = sparse\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 39         assert indices.dim() <= 2\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 40         assert not ctx.needs_input_grad[0], \"Embedding doesn't \" \\\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 43         ctx._backend = type2backend[type(weight)]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: __getitem__",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backends, Line: 15         return self.backends[name].load()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: load",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 34         if self.backend is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 39         return self.backend\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 44         ctx._weight_size = weight.size()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 46         if not indices.is_contiguous():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 47             ctx._indices = indices.contiguous()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 48             indices = ctx._indices\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 52         output = weight.new()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/tensor.py -- function: new",
    "File: /home/hhsecond/mypro/pytorch/torch/tensor.py, class: FloatTensor, Line: 27         return self.__class__(*args, **kwargs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 53         if max_norm is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 56         if indices.dim() == 1:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 57             output = torch.index_select(weight, 0, indices)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 62         return output\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 377         return result\n",
    "File: predictit.py, class: CricketNet, Line: 83         toss_decision = self.toss_embedder(batch[:, 4])\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 325         module = tracing_state._traced_module_stack[-1]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 600         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 328                 return name\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 340             tracing_state.push_scope('%s[%s]' % (self.__class__.__name__, name))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 97         padding_idx = self.padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 98         if padding_idx is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 99             padding_idx = -1\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 100         return self._backend.Embedding.apply(\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 8         fn = self.function_classes.get(name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 9         if fn is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/backends/backend.py, class: THNNFunctionBackend, Line: 11         return fn\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 101             input, self.weight,\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 388                 return _parameters[name]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 102             padding_idx, self.max_norm, self.norm_type,\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/sparse.py, class: Embedding, Line: 103             self.scale_grad_by_freq, self.sparse\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 34         ctx.padding_idx = padding_idx\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 35         ctx.scale_grad_by_freq = scale_grad_by_freq\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 36         ctx._indices = None\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 37         ctx.sparse = sparse\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 39         assert indices.dim() <= 2\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 40         assert not ctx.needs_input_grad[0], \"Embedding doesn't \" \\\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 43         ctx._backend = type2backend[type(weight)]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: __getitem__",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backends, Line: 15         return self.backends[name].load()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py -- function: load",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 34         if self.backend is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/_thnn/__init__.py, class: Backend, Line: 39         return self.backend\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 44         ctx._weight_size = weight.size()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 46         if not indices.is_contiguous():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 47             ctx._indices = indices.contiguous()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 48             indices = ctx._indices\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 52         output = weight.new()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/tensor.py -- function: new",
    "File: /home/hhsecond/mypro/pytorch/torch/tensor.py, class: FloatTensor, Line: 27         return self.__class__(*args, **kwargs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 53         if max_norm is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 56         if indices.dim() == 1:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 57             output = torch.index_select(weight, 0, indices)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/thnn/sparse.py, class: <NO_CLASS_NAME>, Line: 62         return output\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Embedding, Line: 377         return result\n",
    "File: predictit.py, class: CricketNet, Line: 84         inputs = torch.cat((team1, team2, toss_winner, host, toss_decision), dim=1)\n",
    "File: predictit.py, class: CricketNet, Line: 85         inputs = self.dropout(inputs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 325         module = tracing_state._traced_module_stack[-1]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 600         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 328                 return name\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 340             tracing_state.push_scope('%s[%s]' % (self.__class__.__name__, name))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/dropout.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/dropout.py, class: Dropout, Line: 46         return F.dropout(input, self.p, self.training, self.inplace)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: dropout",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 526     return _functions.dropout.Dropout.apply(input, p, training, inplace)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 21         if p < 0 or p > 1:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 24         ctx.p = p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 25         ctx.train = train\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 26         ctx.inplace = inplace\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 28         if ctx.inplace:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 32             output = input.clone()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 34         if ctx.p > 0 and ctx.train:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 35             ctx.noise = cls._make_noise(input)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py -- function: _make_noise",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 11         return input.new().resize_as_(input)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/tensor.py -- function: new",
    "File: /home/hhsecond/mypro/pytorch/torch/tensor.py, class: FloatTensor, Line: 27         return self.__class__(*args, **kwargs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 36             if ctx.p == 1:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 39                 ctx.noise.bernoulli_(1 - ctx.p).div_(1 - ctx.p)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 40             ctx.noise = ctx.noise.expand_as(input)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/tensor.py -- function: expand_as",
    "File: /home/hhsecond/mypro/pytorch/torch/tensor.py, class: FloatTensor, Line: 244         return self.expand(tensor.size())\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 41             output.mul_(ctx.noise)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/_functions/dropout.py, class: <NO_CLASS_NAME>, Line: 43         return output\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Dropout, Line: 377         return result\n",
    "File: predictit.py, class: CricketNet, Line: 86         a = F.relu(self.fc1(inputs))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 325         module = tracing_state._traced_module_stack[-1]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 600         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 328                 return name\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 340             tracing_state.push_scope('%s[%s]' % (self.__class__.__name__, name))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py, class: Linear, Line: 55         return F.linear(input, self.weight, self.bias)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 388                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 388                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: linear",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 883     if input.dim() == 2 and bias is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 885         return torch.addmm(bias, input, weight.t())\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 377         return result\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: relu",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 591     return threshold(input, 0, 0, inplace)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: threshold",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 573     if inplace:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 575     return torch._C._nn.threshold(input, threshold, value)\n",
    "File: predictit.py, class: CricketNet, Line: 87         b = self.fc2(a)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 389         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 390             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 391             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 393         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 394             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 395             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 396                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 352         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 354         if torch.jit._tracing:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 355             result = self._slow_forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _slow_forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 332         input_vars = tuple(torch.autograd.function._iter_variables(input))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 333         tracing_state = torch.jit.get_tracing_state(input_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: get_tracing_state",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 29     if not torch._C._is_tracing(args):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 31     return torch._C._get_tracing_state(args)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 334         if not tracing_state:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 336         if not hasattr(tracing_state, '_traced_module_stack'):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 338         name = self._tracing_name(tracing_state)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: _tracing_name",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 323         if not tracing_state._traced_module_stack:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 325         module = tracing_state._traced_module_stack[-1]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 600         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for name, child in module.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 601         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 602             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 603                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 604                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 327             if child is self:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 328                 return name\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 339         if name:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 340             tracing_state.push_scope('%s[%s]' % (self.__class__.__name__, name))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 343         tracing_state._traced_module_stack.append(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 344         try:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 345             result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py, class: Linear, Line: 55         return F.linear(input, self.weight, self.bias)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 388                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 385         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 386             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 387             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 388                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: linear",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 883     if input.dim() == 2 and bias is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 885         return torch.addmm(bias, input, weight.t())\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 377         return result\n",
    "File: predictit.py, class: CricketNet, Line: 88         log_probs = F.log_softmax(b)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: log_softmax",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 834     if dim is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 835         dim = _get_softmax_dim('log_softmax', input.dim(), _stacklevel)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: _get_softmax_dim",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 769     warnings.warn(\"Implicit dimension choice for \" + name + \" has been deprecated. \"\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 770                   \"Change the call to include dim=X as an argument.\", stacklevel=stacklevel)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 771     if ndim == 0 or ndim == 1 or ndim == 3:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 774         return 1\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 836     return torch._C._nn.log_softmax(input, dim)\n",
    "File: predictit.py, class: CricketNet, Line: 89         return log_probs\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 347             tracing_state.pop_scope()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 348             tracing_state._traced_module_stack.pop()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 349         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: CricketNet, Line: 377         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 272         out_vars = _flatten(out)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 273         _tracing = False\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 274         torch._C._tracer_exit(out_vars)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 275         return trace, out\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 358         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 364         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 377         return result\n",
    "G==> File: /home/hhsecond/mypro/maze/test/visualizer.py -- function: _got_tired",
    "File: /home/hhsecond/mypro/maze/test/visualizer.py, class: Visualizer, Line: 115         sys.settrace(None)\n"
  ],
  "torch_trace": []
}