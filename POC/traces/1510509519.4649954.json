{
  "py_trace": [
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: trace",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 213     if kwargs is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 214         kwargs = {}\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 215     if not isinstance(args, tuple):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 216         args = (args,)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 217     return TracedModule(f, nderivs=nderivs)(*args, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: __init__",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 222         super(TracedModule, self).__init__()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __init__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 51         self._backend = thnn_backend\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 52         self._parameters = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 53         self._buffers = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 54         self._backward_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 55         self._forward_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 56         self._forward_pre_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 57         self._modules = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 58         self.training = True\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 226         self.inner = inner\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 384                 if modules is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 387                 remove_from(self.__dict__, self._parameters, self._buffers)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: remove_from",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 364             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 365                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 364             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 365                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 364             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 365                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 364             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388                 modules[name] = value\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 227         self.nderivs = nderivs\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 368         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 382             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 383             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 396                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 397                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 404                     object.__setattr__(self, name, value)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 317         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 319         result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 234         @_raw_trace(nderivs=self.nderivs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: _raw_trace",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 250     def raw_trace(f):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 263     return raw_trace\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: raw_trace",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 256         @functools.wraps(f)\n",
    "G==> File: /home/hhsecond/anaconda3/lib/python3.6/functools.py -- function: wraps",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 85     return partial(update_wrapper, wrapped=wrapped,\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 86                    assigned=assigned, updated=updated)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 257         def wrapper(in_vars, in_struct=None):\n",
    "G==> File: /home/hhsecond/anaconda3/lib/python3.6/functools.py -- function: update_wrapper",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 59     for attr in assigned:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 60         try:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 61             value = getattr(wrapped, attr)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 65             setattr(wrapper, attr, value)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 59     for attr in assigned:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 60         try:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 61             value = getattr(wrapped, attr)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 65             setattr(wrapper, attr, value)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 59     for attr in assigned:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 60         try:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 61             value = getattr(wrapped, attr)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 65             setattr(wrapper, attr, value)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 59     for attr in assigned:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 60         try:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 61             value = getattr(wrapped, attr)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 65             setattr(wrapper, attr, value)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 59     for attr in assigned:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 60         try:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 61             value = getattr(wrapped, attr)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 65             setattr(wrapper, attr, value)\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 59     for attr in assigned:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 66     for attr in updated:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 67         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 66     for attr in updated:\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 70     wrapper.__wrapped__ = wrapped\n",
    "File: /home/hhsecond/anaconda3/lib/python3.6/functools.py, class: <NO_CLASS_NAME>, Line: 72     return wrapper\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 262         return wrapper\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 238         kw_items = list(kwargs.items())\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 239         kw_items.sort()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 240         in_vars, in_struct = _flatten((args, tuple(kw_items)), self.state_dict(keep_vars=True).values())\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 443         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 444             destination = OrderedDict()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 445         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 448         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 451         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 452             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 453                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 443         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 445         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 448         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 451         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 452             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 453                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 443         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 445         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 446             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 447                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 445         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 446             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 447                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 445         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 448         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 451         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 454         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 451         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 452             if module is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 453                 module.state_dict(destination, prefix + name + '.', keep_vars=keep_vars)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: state_dict",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 443         if destination is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 445         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 446             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 447                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 445         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 446             if param is not None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 447                 destination[prefix + name] = param if keep_vars else param.data\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 445         for name, param in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 448         for name, buf in self._buffers.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 451         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 454         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 451         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 454         return destination\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 451         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 454         return destination\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: _flatten",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 540     obj_vars = tuple(itertools.chain(function._iter_variables(obj), params))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 278                     yield var\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 277                 for var in _iter(o):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 273         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 275         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 276             for o in obj:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _nested_map",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 256     def _map(obj):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 266     return _map\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _map",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 257         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 259         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 261         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <genexpr>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _map",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 257         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 259         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 261         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <genexpr>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _map",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 257         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 258             return fn(obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <genexpr>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <genexpr>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _map",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 257         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 259         elif obj is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 261         elif isinstance(obj, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <genexpr>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <genexpr>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 262             return type(obj)(_map(x) for x in obj)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 542     return obj_vars, obj_struct\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 241         trace, (out_vars, out_struct) = traced_inner(in_vars, in_struct)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: wrapper",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 258             trace = torch._C._tracer_enter(in_vars, nderivs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 259             out_vars, out_struct = f(in_vars, in_struct)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: traced_inner",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 236             return _flatten(self.inner(*args, **kwargs))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 347         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 348             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 349             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 351         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 352             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 353             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 355         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 356             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 357             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 358                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 317         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 319         result = self.forward(*input, **kwargs)\n",
    "G==> File: fizbuz.py -- function: forward",
    "File: fizbuz.py, class: FizBuzNet, Line: 55         hidden = self.hidden(batch)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 347         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 348             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 349             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 351         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 352             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 353             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 355         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 356             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 357             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 358                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 317         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 319         result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py, class: Linear, Line: 55         return F.linear(input, self.weight, self.bias)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 347         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 348             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 349             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 350                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 347         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 348             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 349             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 350                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: linear",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 833     if input.dim() == 2 and bias is not None:\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Variable, Line: 65         if name in self._fallthrough_methods:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Variable, Line: 66             return getattr(self.data, name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 835         return torch.addmm(bias, input, weight.t())\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 320         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 339         return result\n",
    "File: fizbuz.py, class: FizBuzNet, Line: 56         activated = F.sigmoid(hidden)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: sigmoid",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 817     return input.sigmoid()\n",
    "File: fizbuz.py, class: FizBuzNet, Line: 57         out = self.out(activated)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 347         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 348             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 349             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 351         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 352             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 353             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 355         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 356             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 357             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 358                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 317         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 319         result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py, class: Linear, Line: 55         return F.linear(input, self.weight, self.bias)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 347         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 348             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 349             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 350                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 347         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 348             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 349             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 350                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: linear",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 833     if input.dim() == 2 and bias is not None:\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Variable, Line: 65         if name in self._fallthrough_methods:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Variable, Line: 66             return getattr(self.data, name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 835         return torch.addmm(bias, input, weight.t())\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 320         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 339         return result\n",
    "File: fizbuz.py, class: FizBuzNet, Line: 58         return F.sigmoid(out)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: sigmoid",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 817     return input.sigmoid()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 320         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 326         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 339         return result\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: _flatten",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 540     obj_vars = tuple(itertools.chain(function._iter_variables(obj), params))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 271         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 317 _iter_variables = _iter_filter(lambda o: isinstance(o, torch.autograd.Variable))\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 272             yield obj\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _iter",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _nested_map",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 256     def _map(obj):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 266     return _map\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py -- function: _map",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 257         if condition(obj):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/function.py, class: <NO_CLASS_NAME>, Line: 258             return fn(obj)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: <lambda>",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 541     obj_struct = function._nested_map(lambda o: isinstance(o, Variable), lambda x: HOLE)(obj)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 542     return obj_vars, obj_struct\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 260             torch._C._tracer_exit(out_vars)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 261             return trace, (out_vars, out_struct)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 242         out, unmatched = _unflatten(out_vars, out_struct)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: _unflatten",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 527     def unflatten_helper(input, proto):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 536     return unflatten_helper(input, proto)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: unflatten_helper",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 528         res = []\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 529         if not isinstance(proto, (list, tuple)):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 530             return input[0], input[1:]\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 243         assert len(unmatched) == 0\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 244         return trace, out\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 320         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 326         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 339         return result\n",
    "G==> File: /home/hhsecond/mypro/maze/test/visualizer.py -- function: _got_tired",
    "File: /home/hhsecond/mypro/maze/test/visualizer.py, class: Visualizer, Line: 104         sys.settrace(None)\n"
  ],
  "torch_trace": []
}