{
  "py_trace": [
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: trace",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 213     if kwargs is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 214         kwargs = {}\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 215     if not isinstance(args, tuple):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 216         args = (args,)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 217     return TracedModule(f, nderivs=nderivs)(*args, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: __init__",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 222         super(TracedModule, self).__init__()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __init__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 51         self._backend = thnn_backend\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 52         self._parameters = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 53         self._buffers = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 54         self._backward_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 55         self._forward_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 56         self._forward_pre_hooks = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 57         self._modules = OrderedDict()\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 58         self.training = True\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 226         self.inner = inner\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 390                 if modules is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 393                 remove_from(self.__dict__, self._parameters, self._buffers)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: remove_from",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 370             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 371                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 370             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 371                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 370             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 371                 if name in d:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: <NO_CLASS_NAME>, Line: 370             for d in dicts:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 394                 modules[name] = value\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 227         self.nderivs = nderivs\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __setattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 369         def remove_from(*dicts):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 374         params = self.__dict__.get('_parameters')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 375         if isinstance(value, Parameter):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 381         elif params is not None and name in params:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 388             modules = self.__dict__.get('_modules')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 389             if isinstance(value, Module):\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 395             elif modules is not None and name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 402                 buffers = self.__dict__.get('_buffers')\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 403                 if buffers is not None and name in buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 410                     object.__setattr__(self, name, value)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 323         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 325         result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 230         in_vars, _, _ = _flatten((args, list(self.parameters())))\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 510         for name, param in self.named_parameters():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 525         if memo is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 526             memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 527         for name, p in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 531         for mname, module in self.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 568         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 569         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 570             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 571                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 572                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 532             submodule_prefix = prefix + ('.' if prefix else '') + mname\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 525         if memo is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 527         for name, p in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 531         for mname, module in self.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 568         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 569         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 570             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 571                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 572                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 532             submodule_prefix = prefix + ('.' if prefix else '') + mname\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 525         if memo is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 527         for name, p in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 528             if p is not None and p not in memo:\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __hash__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Parameter, Line: 479         return id(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 529                 memo.add(p)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __hash__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Parameter, Line: 479         return id(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 530                 yield prefix + ('.' if prefix else '') + name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 534                 yield name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 534                 yield name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 511             yield param\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 510         for name, param in self.named_parameters():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 527         for name, p in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 528             if p is not None and p not in memo:\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __hash__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Parameter, Line: 479         return id(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 529                 memo.add(p)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __hash__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Parameter, Line: 479         return id(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 530                 yield prefix + ('.' if prefix else '') + name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 534                 yield name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 534                 yield name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 511             yield param\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 510         for name, param in self.named_parameters():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 527         for name, p in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 531         for mname, module in self.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 568         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 569         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 531         for mname, module in self.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 569         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 570             if module is not None and module not in memo:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 571                 memo.add(module)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 572                 yield name, module\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 532             submodule_prefix = prefix + ('.' if prefix else '') + mname\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 525         if memo is None:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 527         for name, p in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 528             if p is not None and p not in memo:\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __hash__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Parameter, Line: 479         return id(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 529                 memo.add(p)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __hash__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Parameter, Line: 479         return id(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 530                 yield prefix + ('.' if prefix else '') + name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 534                 yield name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 534                 yield name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 511             yield param\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 510         for name, param in self.named_parameters():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 527         for name, p in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 528             if p is not None and p not in memo:\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __hash__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Parameter, Line: 479         return id(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 529                 memo.add(p)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __hash__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Parameter, Line: 479         return id(self)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 530                 yield prefix + ('.' if prefix else '') + name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 534                 yield name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 534                 yield name, p\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 511             yield param\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 510         for name, param in self.named_parameters():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 533             for name, p in module.named_parameters(memo, submodule_prefix):\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_parameters",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 527         for name, p in self._parameters.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 531         for mname, module in self.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 568         memo = set()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 569         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 531         for mname, module in self.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 569         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 531         for mname, module in self.named_children():\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: named_children",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 569         for name, module in self._modules.items():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: TracedModule, Line: 231         return _get_trace(self.inner, args, in_vars, self.nderivs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 353         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 354             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 355             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 357         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 358             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 359             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 361         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 362             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 363             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 364                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py -- function: _get_trace",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 237     trace = torch._C._tracer_enter(in_vars, nderivs)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 238     out = f(*args)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 323         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 325         result = self.forward(*input, **kwargs)\n",
    "G==> File: fizbuz.py -- function: forward",
    "File: fizbuz.py, class: FizBuzNet, Line: 55         hidden = self.hidden(batch)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 353         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 354             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 355             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 357         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 358             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 359             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 361         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 362             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 363             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 364                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 323         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 325         result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py, class: Linear, Line: 55         return F.linear(input, self.weight, self.bias)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 353         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 354             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 355             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 356                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 353         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 354             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 355             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 356                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: linear",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 829     if input.dim() == 2 and bias is not None:\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Variable, Line: 66         if name in self._fallthrough_methods:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Variable, Line: 67             return getattr(self.data, name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 831         return torch.addmm(bias, input, weight.t())\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 332         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 345         return result\n",
    "File: fizbuz.py, class: FizBuzNet, Line: 56         activated = F.sigmoid(hidden)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: sigmoid",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 813     return input.sigmoid()\n",
    "File: fizbuz.py, class: FizBuzNet, Line: 57         out = self.out(activated)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 353         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 354             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 355             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 357         if '_buffers' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 358             _buffers = self.__dict__['_buffers']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 359             if name in _buffers:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 361         if '_modules' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 362             modules = self.__dict__['_modules']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 363             if name in modules:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 364                 return modules[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __call__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 323         for hook in self._forward_pre_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 325         result = self.forward(*input, **kwargs)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py -- function: forward",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/linear.py, class: Linear, Line: 55         return F.linear(input, self.weight, self.bias)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 353         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 354             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 355             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 356                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 353         if '_parameters' in self.__dict__:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 354             _parameters = self.__dict__['_parameters']\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 355             if name in _parameters:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 356                 return _parameters[name]\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: linear",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 829     if input.dim() == 2 and bias is not None:\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py -- function: __getattr__",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Variable, Line: 66         if name in self._fallthrough_methods:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/autograd/variable.py, class: Variable, Line: 67             return getattr(self.data, name)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 831         return torch.addmm(bias, input, weight.t())\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 326         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 332         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: Linear, Line: 345         return result\n",
    "File: fizbuz.py, class: FizBuzNet, Line: 58         return F.sigmoid(out)\n",
    "G==> File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py -- function: sigmoid",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/functional.py, class: <NO_CLASS_NAME>, Line: 813     return input.sigmoid()\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 326         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 332         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: FizBuzNet, Line: 345         return result\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 239     out_vars, _, _ = _flatten(out)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 240     torch._C._tracer_exit(out_vars)\n",
    "File: /home/hhsecond/mypro/pytorch/torch/jit/__init__.py, class: <NO_CLASS_NAME>, Line: 241     return trace, out\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 326         for hook in self._forward_hooks.values():\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 332         if len(self._backward_hooks) > 0:\n",
    "File: /home/hhsecond/mypro/pytorch/torch/nn/modules/module.py, class: TracedModule, Line: 345         return result\n",
    "G==> File: /home/hhsecond/mypro/maze/test/visualizer.py -- function: _got_tired",
    "File: /home/hhsecond/mypro/maze/test/visualizer.py, class: Visualizer, Line: 116         sys.settrace(None)\n"
  ],
  "torch_trace": []
}